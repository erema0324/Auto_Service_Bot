import os
import telebot
import re
import db
import hashlib
import calendar
import time as t
from telebot import types
from dotenv import load_dotenv
from datetime import datetime, timedelta, time as dtime
from db import add_termin
from db import check_appointment_availability
from db import has_appointment
from notification import handle_announcement_command, process_announcement_preview, send_announcement_to_all_users
import json
import sqlite3

with open('autobd.txt', 'r', encoding='utf-8') as f:
    car_db = json.load(f)



load_dotenv()
bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(bot_token)
user_data = {}

email_pattern = re.compile(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$")
phone_pattern = re.compile(r"^\+?[0-9]{10,15}$")
vin_pattern = re.compile(r"^[A-HJ-NPR-Z0-9]{17}$")

class User:
    def __init__(self, name=None, email=None, password=None, phone=None, car_model=None, car_year=None, car_vin=None):
        self.name = name
        self.email = email
        self.password = password
        self.phone = phone
        self.car_model = car_model
        self.car_year = car_year
        self.car_vin = car_vin
        self.state = "START"

def hash_password(password):
    salt = "somesalt"  # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—É—é —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ–ª–∏
    hashed_password = hashlib.sha256((password + salt).encode()).hexdigest()
    return hashed_password

def create_back_button():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('–ù–∞–∑–∞–¥‚Ü©Ô∏è')
    return markup

def create_main_menu():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('–ù–∞–∑–Ω–∞—á–∏—Ç—å TerminüìÖ', '–õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Çüë§', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—èüìú', '–ö–æ–Ω—Ç–∞–∫—Ç—ãüìû')
    return markup

def update_keyboard(message, markup):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

def create_time_buttons(day_of_week):
    markup = types.InlineKeyboardMarkup()
    row = []
    if day_of_week < 5:  # –†–∞–±–æ—á–∏–µ –¥–Ω–∏ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É
        work_hours = ["16:00", "17:00", "18:00", "19:00"]
    elif day_of_week == 5:  # –°—É–±–±–æ—Ç–∞
        work_hours = ["08:00", "09:00", "10:00", "11:00", "12:00", "13:00"]
    else:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        work_hours = []

    for hour in work_hours:
        row.append(types.InlineKeyboardButton(hour, callback_data="time-" + hour))
    markup.row(*row)

    return markup

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    user_id = message.from_user.id
    user_data[user_id] = User()

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö üîê')
    msg = bot.send_message(message.chat.id, "–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö? –ù–∞–∂–º–∏—Ç–µ , –Ω–∞ –∫–Ω–æ–ø–∫—É (–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö) , –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤–Ω–∏–∑—É ", reply_markup=markup)
    bot.register_next_step_handler(msg, process_agreement_step)



def process_agreement_step(message):
    user_id = message.from_user.id
     
    if message.text == '–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö üîê':
        user_data[user_id].state = "AGREEMENT"

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–í–æ–π—Ç–∏üîë', '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—èüìù')
        update_keyboard(message, markup)
        bot.register_next_step_handler(message, process_auth_step)
    else:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö üîê')
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.", reply_markup=markup)
        bot.register_next_step_handler(msg, process_agreement_step) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —à–∞–≥


def process_auth_step(message):
    user_id = message.from_user.id

    if user_data[user_id].state == "AGREEMENT":
        if message.text == "–í–æ–π—Ç–∏üîë":
            user_data[user_id].state = "LOGIN"
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à emailüìß", reply_markup=create_back_button())
            bot.register_next_step_handler(msg, process_login_step)
        elif message.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—èüìù":
            user_data[user_id].state = "REGISTRATION"
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è", reply_markup=create_back_button())
            bot.register_next_step_handler(msg, process_name_step)
        else:
            msg = bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥.")
            bot.register_next_step_handler(msg, process_auth_step)
    else:
        send_welcome(message)

def process_login_step(message):
    user_id = message.from_user.id

    if message.text == '–ù–∞–∑–∞–¥‚Ü©Ô∏è':
        return process_auth_step(message)

    if user_data[user_id].state != "LOGIN":
        return send_welcome(message)

    if not email_pattern.match(message.text):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.üìù")
        bot.register_next_step_handler(msg, process_login_step)
    else:
        user_data[user_id].email = message.text
        session = db.get_db_session()
        user = session.query(db.User).filter(db.User.email == user_data[user_id].email).first()
        if user:
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—åüîê", reply_markup=create_back_button())
            bot.register_next_step_handler(msg, process_password_login_step)
        else:
            bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email.")
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email", reply_markup=create_back_button())
            bot.register_next_step_handler(msg, process_login_step)

def process_password_login_step(message):
    user_id = message.from_user.id

    if user_data[user_id].state != "LOGIN":
        return send_welcome(message)

    session = db.get_db_session()
    user = session.query(db.User).filter(db.User.email == user_data[user_id].email).first()
    if user and db.check_password(user.password, message.text):
        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!")
        update_keyboard(message, create_main_menu())
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email", reply_markup=create_back_button())
        bot.register_next_step_handler(msg, process_login_step)


def process_name_step(message):
    user_id = message.from_user.id

    if message.text == '–ù–∞–∑–∞–¥‚Ü©Ô∏è':
        return process_auth_step(message)

    if user_data[user_id].state != "REGISTRATION" and user_data[user_id].state != "LOGIN":
        return send_welcome(message)

    if user_data[user_id].state == "LOGIN":
        user_data[user_id] = User()

    user_data[user_id].name = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=create_back_button())
    bot.register_next_step_handler(msg, process_phone_step)

def process_phone_step(message):
    user_id = message.from_user.id

    if message.text == '–ù–∞–∑–∞–¥‚Ü©Ô∏è':
        return process_name_step(message)

    if user_data[user_id].state != "REGISTRATION":
        return send_welcome(message)

    if not phone_pattern.match(message.text):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=create_back_button())
        bot.register_next_step_handler(msg, process_phone_step)
    else:
        user_data[user_id].phone_number = message.text
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email", reply_markup=create_back_button())
        bot.register_next_step_handler(msg, process_email_step)

def process_email_step(message):
    user_id = message.from_user.id

    if message.text == '–ù–∞–∑–∞–¥‚Ü©Ô∏è':
        return process_phone_step(message)

    if user_data[user_id].state != "REGISTRATION":
        return send_welcome(message)

    if not email_pattern.match(message.text):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.üìù", reply_markup=create_back_button())
        bot.register_next_step_handler(msg, process_email_step)
    else:
        user_data[user_id].email = message.text
        try:
            session = db.get_db_session()
            user = session.query(db.User).filter(db.User.email == user_data[user_id].email).first()
            if user:
                msg = bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–π email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ï—Å–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å, –ø—Ä–æ—à—É –í–∞—Å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.üîß", reply_markup=create_back_button())
                bot.register_next_step_handler(msg, process_email_step)
            else:
                msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—åüîê", reply_markup=create_back_button())
                bot.register_next_step_handler(msg, process_password_step)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            msg = bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=create_back_button())
            bot.register_next_step_handler(msg, process_email_step)

def create_confirm_buttons():
    markup = types.InlineKeyboardMarkup()
    itembtn1 = types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ', callback_data='confirm')
    itembtn2 = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å‚ùå', callback_data='cancel') 
    markup.add(itembtn1, itembtn2)
    return markup

def process_password_step(message):
    user_id = message.from_user.id

    if message.text == '–ù–∞–∑–∞–¥‚Ü©Ô∏è':
        return process_email_step(message)

    if user_id not in user_data:
        user_data[user_id] = User()

    if user_data[user_id].state != "REGISTRATION":
        return send_welcome(message)

    user_data[user_id].password = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –±–µ–∑ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    countries = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    for brand in car_db:
        countries.add(brand['country'])
    for country in sorted(countries):  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω
        markup.add(country)
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –í–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—èüåç", reply_markup=markup)
    bot.register_next_step_handler(msg, process_car_country_step)


def process_car_country_step(message):
    user_id = message.from_user.id

    if message.text == '–ù–∞–∑–∞–¥‚Ü©Ô∏è':
        return process_password_step(message)

    if user_data[user_id].state != "REGISTRATION":
        return send_welcome(message)

    countries = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    for brand in car_db:
        countries.add(brand['country'])
    
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    for country in sorted(countries):  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω
        markup.add(country)

    if message.text not in countries:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_country_step)
    else:
        user_data[user_id].car_country = message.text

        brands = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        for brand in car_db:
            if brand['country'] == user_data[user_id].car_country:
                brands.add(brand['name'])
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        for brand in sorted(brands):  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±—Ä–µ–Ω–¥–æ–≤
            markup.add(brand)
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –í–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—èüöóüèÅ", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_brand_step)




def process_car_model_step(message):
    user_id = message.from_user.id

    if message.text == '–ù–∞–∑–∞–¥‚Ü©Ô∏è':
        return process_password_step(message)

    if user_id not in user_data:
        user_data[user_id] = User()

    if user_data[user_id].state != "REGISTRATION":
        return send_welcome(message)

    user_data[user_id].car_model = message.text

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –í–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—èüìÖüöó", reply_markup=create_back_button())
    bot.register_next_step_handler(msg, process_car_year_step)

def process_car_brand_step(message):
    user_id = message.from_user.id

    if message.text == '–ù–∞–∑–∞–¥‚Ü©Ô∏è':
        return process_car_country_step(message)

    if user_data[user_id].state != "REGISTRATION":
        return send_welcome(message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—Ä–µ–Ω–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    chosen_brand = None
    brands = set()  # –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä brands –∑–¥–µ—Å—å
    for brand in car_db:
        if brand['country'] == user_data[user_id].car_country:
            brands.add(brand['name'])
            if brand['name'] == message.text:
                chosen_brand = brand
                break

    if chosen_brand is None:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        for brand in sorted(brands):  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±—Ä–µ–Ω–¥–æ–≤
            markup.add(brand)
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Öüö´", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_brand_step)
    else:
        user_data[user_id].car_brand = message.text

        models = sorted(model['name'] for model in chosen_brand['models'])  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        for model in models:
            markup.add(model)
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—èüöóüìã", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_model_step)





def process_car_model_step(message):
    user_id = message.from_user.id

    if message.text == '–ù–∞–∑–∞–¥‚Ü©Ô∏è':
        return process_car_brand_step(message)

    if user_id not in user_data:
        user_data[user_id] = User()

    if user_data[user_id].state != "REGISTRATION":
        return send_welcome(message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    chosen_brand = None
    for brand in car_db:
        if brand['country'] == user_data[user_id].car_country and brand['name'] == user_data[user_id].car_brand:
            chosen_brand = brand
            break

    if chosen_brand is None:
        return process_car_brand_step(message)

    chosen_model = None
    for model in chosen_brand['models']:
        if model['name'] == message.text:
            chosen_model = model
            break

    if chosen_model is None:
        # –°–æ–∑–¥–∞–µ–º markup –∑–¥–µ—Å—å
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        for model in sorted(model['name'] for model in chosen_brand['models']):  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π
            markup.add(model)
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Öüö´", reply_markup=markup)
        bot.register_next_step_handler(msg, process_car_model_step)
    else:
        user_data[user_id].car_model = message.text
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—èüìÖüöó", reply_markup=create_back_button())
        bot.register_next_step_handler(msg, process_car_year_step)




def process_car_year_step(message):
    user_id = message.from_user.id

    if message.text == '–ù–∞–∑–∞–¥‚Ü©Ô∏è':
        return process_car_model_step(message)

    if user_data[user_id].state != "REGISTRATION":
        return send_welcome(message)

    if not (message.text.isdigit() and 1885 < int(message.text) <= datetime.now().year):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.üö´", reply_markup=create_back_button())
        bot.register_next_step_handler(msg, process_car_year_step)
    else:
        user_data[user_id].car_year = message.text
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ VIN-–∫–æ–¥ –í–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—èüöóüîç", reply_markup=create_back_button())
        bot.register_next_step_handler(msg, process_car_vin_step)

def process_car_vin_step(message):
    print("process_car_vin_step called") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    user_id = message.from_user.id

    if message.text == '–ù–∞–∑–∞–¥‚Ü©Ô∏è':
        return process_car_year_step(message)

    if user_id not in user_data:
        user_data[user_id] = User()

    if user_data[user_id].state != "REGISTRATION":
        print("State is not REGISTRATION") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        return send_welcome(message)

    if not vin_pattern.match(message.text):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π VIN.üö´", reply_markup=create_back_button())
        bot.register_next_step_handler(msg, process_car_vin_step)
    else:
        user_data[user_id].car_vin = message.text
        user_added = db.add_user(
            user_id,
            user_data[user_id].name,
            user_data[user_id].phone_number,
            user_data[user_id].email,
            user_data[user_id].password,
            user_data[user_id].car_country,
            user_data[user_id].car_brand,
            user_data[user_id].car_model,
            user_data[user_id].car_year,
            user_data[user_id].car_vin,
            bot  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        )

        print(f"user_added: {user_added}") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        if not user_added:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
            print("User already exists, going to auth step") # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            return process_auth_step(message)

        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!üéâü•≥")
        update_keyboard(message, create_main_menu())




@bot.message_handler(commands=['back'])
def handle_back_command(message):
    user_id = message.from_user.id

    if user_data[user_id].state == "AGREEMENT":
        send_welcome(message)
    elif user_data[user_id].state == "LOGIN":
        user_data[user_id].state = "START"  # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        msg = bot.send_message(message.chat.id, "–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?", reply_markup=create_agreement_buttons())
        bot.register_next_step_handler(msg, process_agreement_step)
    elif user_data[user_id].state == "REGISTRATION":
        user_data[user_id].state = "START"  # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        msg = bot.send_message(message.chat.id, "–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?", reply_markup=create_agreement_buttons())
        bot.register_next_step_handler(msg, process_agreement_step)
    else:
        update_keyboard(message, create_main_menu())

@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–Ω–∞—á–∏—Ç—å TerminüìÖ')
def handle_appointment_button(message):
    user_id = message.from_user.id

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ user_id –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ user_data. –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç User
    if user_id not in user_data:
        user_data[user_id] = User()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π termin
    if has_appointment(user_id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π termin. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤—ã–π, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π.")
        return

    user_data[user_id].year = None
    user_data[user_id].month = None
    user_data[user_id].day = None
    user_data[user_id].time = None
    user_data[user_id].note = None

    msg = bot.send_message(message.chat.id, "–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ, –∑–∞–º–µ–Ω—É –º–∞—Å–ª–∞ –∏ —Ç.–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏–∏ —Ç–∏–ø —É—Å–ª—É–≥–∏:")
    bot.register_next_step_handler(msg, process_appointment_note)



def process_appointment_note(message):
    user_id = message.from_user.id

    user_data[user_id].note = message.text

    now = datetime.now()
    user_data[user_id].year = now.year
    user_data[user_id].month = now.month

    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ", reply_markup=create_calendar(now.year, now.month))

def create_calendar(year, month):
    markup = types.InlineKeyboardMarkup()
    now = datetime.now() + timedelta(days=1)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å

    # First row - Month and Year
    months = {
        1: '–Ø–Ω–≤–∞—Ä—å',
        2: '–§–µ–≤—Ä–∞–ª—å',
        3: '–ú–∞—Ä—Ç',
        4: '–ê–ø—Ä–µ–ª—å',
        5: '–ú–∞–π',
        6: '–ò—é–Ω—å',
        7: '–ò—é–ª—å',
        8: '–ê–≤–≥—É—Å—Ç',
        9: '–°–µ–Ω—Ç—è–±—Ä—å',
        10: '–û–∫—Ç—è–±—Ä—å',
        11: '–ù–æ—è–±—Ä—å',
        12: '–î–µ–∫–∞–±—Ä—å'
    }
    row = []
    row.append(types.InlineKeyboardButton(months[month] + " " + str(year), callback_data="ignore"))
    markup.row(*row)

    # Second row - Week Days
    row = []
    for day in ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]:
        row.append(types.InlineKeyboardButton(day, callback_data="ignore"))
    markup.row(*row)

    # Days of the month
    my_calendar = calendar.monthcalendar(year, month)
    for week in my_calendar:
        row = []
        for day in week:
            if day == 0:
                row.append(types.InlineKeyboardButton(" ", callback_data="ignore"))
            elif day < now.day and month == now.month and year == now.year:
                row.append(types.InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                row.append(types.InlineKeyboardButton(str(day), callback_data="calendar-day-" + str(day)))
        markup.row(*row)

    # Last row - Buttons
    row = []
    if month == datetime.now().month and year == datetime.now().year:
        row.append(types.InlineKeyboardButton(" ", callback_data="ignore"))
    else:
        row.append(types.InlineKeyboardButton("<", callback_data="previous-month"))
    row.append(types.InlineKeyboardButton(" ", callback_data="ignore"))
    row.append(types.InlineKeyboardButton(">", callback_data="next-month"))
    markup.row(*row)

    return markup

def get_all_users_func():
    session = db.get_db_session()
    return [user.id for user in session.query(db.User).all()]

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
    user = db.find_user(user_id)
    if not user:
        bot.send_message(chat_id=call.message.chat.id, text="–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return

    if call.data in ["announcement_confirm", "announcement_cancel"]:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–æ–¥—É–ª—è notification.py
        send_announcement_to_all_users(bot, call, get_all_users_func)
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ –±—ã–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if user_id not in user_data:
        user_data[user_id] = {
            "year": None,
            "month": None,
            "day": None,
            "time": None,
            "note": None
        }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Å–ª—É—á–∞—è –æ—Ç–º–µ–Ω—ã —Ç–µ—Ä–º–∏–Ω–∞
    if not call.data.startswith("cancel_") and db.has_appointment(user_id):
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ç–µ—Ä–º–∏–Ω.")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –¢–µ—Ä–º–∏–Ω"
    if call.data.startswith("cancel_"):
        termin_id = int(call.data.split('_')[1])
        session = db.get_db_session()
        termin = session.query(db.Termin).filter(db.Termin.id == termin_id).first()
        if termin and termin.user_id == user_id:
            session.delete(termin)
            session.commit()
            user = session.query(db.User).filter(db.User.id == user_id).first()
            if user:
                notify_admin_about_canceled_termin(user.name, user_id, user.phone_number, f"{termin.day}-{termin.month}-{termin.year}", termin.time, termin.note, user.car_model, user.car_vin)
            bot.send_message(call.message.chat.id, "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    elif call.data.startswith("calendar-day-"):
        _, _, day = call.data.split("-", 2)
        year = user_data[user_id].year
        month = user_data[user_id].month
        if year is None or month is None:
            bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–Ω–∞—á–∏—Ç—å –¢–µ—Ä–º–∏–Ω'.")
            return
        user_data[user_id].day = day
        day_of_week = datetime(year, month, int(day)).weekday()
        if day_of_week == 6:
            bot.send_message(chat_id=call.message.chat.id, text="–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        else:
            bot.send_message(chat_id=call.message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è: ", reply_markup=create_time_buttons(day_of_week))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü"
    elif call.data == "next-month":
        year = user_data[user_id].year
        month = user_data[user_id].month
        if month is not None:
            month += 1
            if month > 12:
                month = 1
                year += 1
            user_data[user_id].year = year
            user_data[user_id].month = month
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ", reply_markup=create_calendar(year, month))
        else:
            bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–Ω–∞—á–∏—Ç—å –¢–µ—Ä–º–∏–Ω'.")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü"
    elif call.data == "previous-month":
        year = user_data[user_id].year
        month = user_data[user_id].month
        if month is not None:
            month -= 1
            if month < 1:
                month = 12
                year -= 1
            user_data[user_id].year = year
            user_data[user_id].month = month
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ", reply_markup=create_calendar(year, month))
        else:
            bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–Ω–∞—á–∏—Ç—å –¢–µ—Ä–º–∏–Ω'.")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    elif call.data.startswith("time-"):
        _, time = call.data.split("-", 1)
        user_data[user_id].time = time
        if check_appointment_availability(user_data[user_id].year, user_data[user_id].month, user_data[user_id].day, user_data[user_id].time):
            bot.send_message(chat_id=call.message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –≤—ã–±–æ—Ä: ", reply_markup=create_confirm_buttons())
        else:
            bot.send_message(chat_id=call.message.chat.id, text="–î–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    elif call.data == "confirm":
        year = user_data[user_id].year
        month = user_data[user_id].month
        day = user_data[user_id].day
        time = user_data[user_id].time
        note = user_data[user_id].note

        if None in (year, month, day, time, note):
            bot.send_message(chat_id=call.message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å.")
            return

        if check_appointment_availability(year, month, day, time):
            session = db.get_db_session()
        
            # –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id (id) –≤–º–µ—Å—Ç–æ email
            user = session.query(db.User).filter(db.User.id == user_id).first()
        
            if user:
                name = user.name
                car_brand = user.car_model
                vin = user.car_vin
                phone_number = user.phone_number
                bot.send_message(chat_id=call.message.chat.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞:\n–î–∞—Ç–∞: {day}-{month}-{year}\n–í—Ä–µ–º—è: {time}\n–£—Å–ª—É–≥–∞: {note}")
                add_termin(user.id, note, day, month, year, time, name, car_brand, vin, phone_number)
                notify_admin_about_new_termin(name, user_id, phone_number, f"{day}-{month}-{year}", time, note, car_brand, vin)
            else:
                bot.send_message(chat_id=call.message.chat.id, text="–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            bot.send_message(chat_id=call.message.chat.id, text="–î–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.")


    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    elif call.data in ["confirm_announcement", "cancel_announcement"]:
        confirm_announcement(call)


    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω—è–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    elif call.data == "cancel":
        user_data[user_id].year = None
        user_data[user_id].month = None
        user_data[user_id].day = None
        user_data[user_id].time = None
        user_data[user_id].note = None
        bot.send_message(chat_id=call.message.chat.id, text="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å.")
    else:
        pass



def notify_admin_about_new_termin(name, user_id, phone, date, time, description, car, vin):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–≤–æ–Ω–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_call_link = f"[{phone}](tel:{phone})"

    ADMIN_ID = 123456 # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    termin_message = f'''–£ –í–∞—Å –Ω–æ–≤—ã–π –¢–µ—Ä–º–∏–Ω:
    –ò–º—è: {name}
    ID –¢–µ–ª–µ–≥—Ä–∞–º –ö–ª–∏–µ–Ω—Ç–∞: {user_id}
    –ó–≤–æ–Ω–æ–∫: {phone_call_link}
    –î–∞—Ç–∞: {date}
    –í—Ä–µ–º—è: {time}
    –û–ø–∏—Å–∞–Ω–∏–µ: {description}
    –ê–≤—Ç–æ: {car}
    VIN: {vin}'''

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
    bot.send_message(ADMIN_ID, termin_message, parse_mode="Markdown")

def notify_admin_about_canceled_termin(name, user_id, phone, date, time, description, car, vin):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–≤–æ–Ω–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_call_link = f"[{phone}](tel:{phone})"

    ADMIN_ID = 123456  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    termin_message = f'''–¢–µ—Ä–º–∏–Ω –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω:
    –ò–º—è: {name}
    ID –¢–µ–ª–µ–≥—Ä–∞–º –ö–ª–∏–µ–Ω—Ç–∞: {user_id}
    –ó–≤–æ–Ω–æ–∫: {phone_call_link}
    –î–∞—Ç–∞: {date}
    –í—Ä–µ–º—è: {time}
    –û–ø–∏—Å–∞–Ω–∏–µ: {description}
    –ê–≤—Ç–æ: {car}
    VIN: {vin}'''

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
    bot.send_message(ADMIN_ID, termin_message, parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text == '–õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Çüë§')
def handle_account_button(message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    session = db.get_db_session()
    user = session.query(db.User).filter(db.User.id == user_id).first()

    if user:
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        bot.send_message(message.chat.id, f"–ò–º—è: {user.name}\nEmail: {user.email}\n–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n–ë—Ä–µ–Ω–¥ –∞–≤—Ç–æ: {user.car_brand}\n–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ: {user.car_model}\n–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ: {user.car_year}\nVIN –∞–≤—Ç–æ: {user.car_vin}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        termins = session.query(db.Termin).filter(db.Termin.user_id == user_id).all()

        if termins:
            for termin in termins:
                # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ—Ä–º–∏–Ω–∞
                markup = types.InlineKeyboardMarkup()
                cancel_btn = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –¢–µ—Ä–º–∏–Ω‚ùå", callback_data=f"cancel_{termin.id}")
                markup.add(cancel_btn)

                bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å—å:\n–î–∞—Ç–∞: {termin.day}-{termin.month}-{termin.year}\n–í—Ä–µ–º—è: {termin.time}\n–£—Å–ª—É–≥–∞: {termin.note}", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.")
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.‚ùå")



# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
terms_text = """
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞ Werkstatt

1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è

1.1. –ù–∞—Å—Ç–æ—è—â–µ–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (–¥–∞–ª–µ–µ ‚Äî –°–æ–≥–ª–∞—à–µ–Ω–∏–µ) —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —á–∞—Ç-–±–æ—Ç–∞ Werkstatt (–¥–∞–ª–µ–µ ‚Äî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è), —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–∞—Ç-–±–æ—Ç–∞, —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.

2. –ü—Ä–µ–¥–º–µ—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è

2.1. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∞–≤–æ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —á–∞—Ç-–±–æ—Ç–∞ Werkstatt, –≤–∫–ª—é—á–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ.

2.2. –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–∞—è —á–∞—Ç-–±–æ—Ç–æ–º Werkstatt, –Ω–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä.

3. –ü—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–æ—Ä–æ–Ω

3.1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø—Ä–∞–≤–µ:

- –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —É—Å–ª—É–≥–∏ —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç–∞ Werkstatt;
- –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–∏;
- –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –æ—Ç —á–∞—Ç-–±–æ—Ç–∞ –Ω–∞ —Ç–µ–º—É —Å–µ—Ä–≤–∏—Å–∞.

3.2. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ø—Ä–∞–≤–µ:

- –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å, –∏–∑–º–µ–Ω—è—Ç—å, —É–¥–∞–ª—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Ç-–±–æ—Ç–∞ Werkstatt;
- –∏–∑–º–µ–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–∞—Ç-–±–æ—Ç–∞ Werkstatt;
- –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —á–∞—Ç-–±–æ—Ç—É –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –°–æ–≥–ª–∞—à–µ–Ω–∏—è.

3.3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑–∞–Ω:

- –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Ç-–±–æ—Ç Werkstatt –≤ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö;
- –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏–º –ª–∏—Ü–∞–º;
- —Å–æ–±–ª—é–¥–∞—Ç—å –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Ç-–±–æ—Ç–æ–º Werkstatt –∏ –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —á–∞—Ç-–±–æ—Ç–∞.

3.4. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—è–∑–∞–Ω–∞:

- –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —á–∞—Ç-–±–æ—Ç–∞ Werkstatt –∫—Ä–æ–º–µ —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ –Ω–µ–∑–∞–≤–∏—Å—è—â–∏–º –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏—á–∏–Ω–∞–º.

4. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω

4.1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏—á–Ω–æ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–∞ Werkstatt –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

4.2. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—É—é —á–∞—Ç-–±–æ—Ç–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ —Ç–∞–∫–∂–µ –∑–∞ —É—Å–ª—É–≥–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–µ —Ç—Ä–µ—Ç—å–∏–º–∏ –ª–∏—Ü–∞–º–∏ —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç Werkstatt.

5. –£—Å–ª–æ–≤–∏—è –¥–µ–π—Å—Ç–≤–∏—è –°–æ–≥–ª–∞—à–µ–Ω–∏—è

5.1. –î–∞–Ω–Ω–æ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Ç-–±–æ—Ç–∞ Werkstatt –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –µ–≥–æ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏.

5.2. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –≤ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –æ–ø–æ–≤–µ—â–∞–µ—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ.
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"
@bot.message_handler(func=lambda message: message.text == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—èüìú')
def handle_terms_button(message):
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    bot.send_message(message.chat.id, terms_text, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
@bot.message_handler(func=lambda message: message.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ãüìû')
def handle_contacts_button(message):
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π –Ω–∞ Whatsapp
    contacts_text = """
    –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:

    - [Telegram]()
    - [Whatsapp]()
    """

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π –Ω–∞ Whatsapp
    bot.send_message(message.chat.id, contacts_text, parse_mode='Markdown')



@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_'))
def handle_cancel(call):
    user_id = call.from_user.id
    termin_id = int(call.data.split('_')[1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    session = db.get_db_session()
    termin = session.query(db.Termin).filter(db.Termin.id == termin_id).first()

    if termin and termin.user_id == user_id:
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        session.delete(termin)
        session.commit()

        bot.send_message(call.message.chat.id, "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.‚úÖ")
    else:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.üö´")

@bot.message_handler(commands=['–æ–±—ä—è–≤–ª–µ–Ω–∏–µ'])
def announcement_command(message):
    handle_announcement_command(bot, message)

@bot.callback_query_handler(func=lambda call: call.data in ["confirm_announcement", "cancel_announcement"])
def confirm_announcement(call):
    send_announcement_to_all_users(bot, call, get_all_users)  # get_all_users –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


def is_user_registered(user_id):
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE id=?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user is not None


@bot.message_handler(func=lambda message: message.text == "/appointment")
def appointment_handler(message):
    user_id = message.from_user.id
    if not is_user_registered(user_id):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return
    handle_appointment_button(message)


@bot.message_handler(func=lambda message: message.text == "/personal_cabinet")
def personal_cabinet_handler(message):
    user_id = message.from_user.id
    if not is_user_registered(user_id):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return
    handle_account_button(message)

@bot.message_handler(func=lambda message: message.text == "/user_agreements")
def user_agreements_handler(message):
    handle_terms_button(message)

@bot.message_handler(func=lambda message: message.text == "/contacts")
def contacts_handler(message):
    handle_contacts_button(message)











if __name__ == '__main__':
    import time
    from threading import Thread
    from datetime import datetime, timedelta
    import sqlalchemy

    def check_termins():
        while True:
            try:
                session = db.get_db_session()
                now = datetime.now()

                termins = session.query(db.Termin).filter(db.Termin.canceled == False)

                count = 0
                for termin in termins:
                    try:
                        termin_time = datetime.strptime(termin.time, '%H:%M')
                        termin_datetime = datetime(termin.year, termin.month, termin.day, termin_time.hour, termin_time.minute)
                    except ValueError:
                        continue

                    if termin_datetime.date() == now.date() + timedelta(days=1) and now.time() >= dtime(14, 0) and not termin.notification_sent:
                        send_reminder(termin, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É –≤–∞—Å –∑–∞–≤—Ç—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞ –≤ (time) –ø–æ –ø–æ–≤–æ–¥—É (note). –ï—Å–ª–∏ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Ä–µ–º—è, –ø—Ä–æ—à—É –≤–æ–π—Ç–∏ –≤ –Ω–∞—à –¢–ì –±–æ—Ç –∏ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É.")
                        termin.notification_sent = True

                    elif termin_datetime.date() == now.date() and now >= (termin_datetime - timedelta(hours=1)) and not termin.notification_sent:
                        send_reminder(termin, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞ –≤ (time) –ø–æ –ø–æ–≤–æ–¥—É (note). –ï—Å–ª–∏ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Ä–µ–º—è, –ø—Ä–æ—à—É –≤–æ–π—Ç–∏ –≤ –Ω–∞—à –¢–ì –±–æ—Ç –∏ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É. –¢–∞–∫ –∂–µ –ø—Ä–æ—à—É —É–≤–µ–¥–æ–º–∏—Ç—å –æ–± —ç—Ç–æ–º –º–∞—Å—Ç–µ—Ä–∞.")
                        termin.notification_sent = True

                    elif now > termin_datetime:
                        fertig = db.Fertig(
                            user_id=termin.user_id, 
                            note=termin.note, 
                            day=termin.day,
                            month=termin.month,
                            year=termin.year,
                            time=termin.time,
                            name=termin.name,
                            car_brand=termin.car_brand,
                            vin=termin.vin,
                            phone_number=termin.phone_number
                        )
                        session.add(fertig)
                        session.delete(termin)
                        count += 1

                session.commit()

                print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ {now}. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {count}")

            except sqlalchemy.exc.SQLAlchemyError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
            except Exception as e:
                print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            finally:
                time.sleep(1 * 60)


    def send_reminder(termin, message):
        user_id = termin.user_id
        termin_time = termin.time
        note = termin.note

        message_text = message.replace("(time)", termin_time).replace("(note)", note)
        bot.send_message(user_id, message_text)

        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ Termin {termin.day}/{termin.month}/{termin.year} –∏ {termin.time}. User: {user_id} {message_text}")



    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É termins –≤ —Ñ–æ–Ω–µ
    thread = Thread(target=check_termins)
    thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.polling(none_stop=True)